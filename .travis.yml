language: bash

# Doc
# - Travis Job Lifecycle : https://docs.travis-ci.com/user/job-lifecycle/

matrix:
  include:
    - name: "Linux Debug"
      os: linux
      dist: xenial
      env:
        - MODE=Debug

    - name: "Linux Release"
      os: linux
      dist: xenial
      env:
        - MODE=Release

    - name: "MacOS Debug"
      os: osx
      osx_image: xcode9.4
      env:
        - MODE=Debug

    # Help : https://travis-ci.community/c/environments/windows
    # Pre-installed packages: https://docs.travis-ci.com/user/reference/windows/
    # use `choco` command as package command
    - name: "Windows Debug"
      os: windows
      env:
        - MODE=Debug

#    - name: "Windows Release"
#      os: windows
#      env:
#        - MODE=Release

    - name: "Linux Coverage"
      os: linux
      dist: xenial
      compiler: clang
      env:
        - MODE=Coverage
      addons:
        apt:
          update: true
          packages:
            - lcov

#    # Disabled because too long
#    - name: "MacOS Coverage"
#      os: osx
#      osx_image: xcode9.4
#      env:
#        - MODE=Coverage
#      addons:
#        homebrew:
#          update: true
#          packages:
#            - lcov

install:
  - >
    if [[ "$MODE" == "Coverage" ]]; then
      if [[ "$TRAVIS_OS_NAME" == "linux" || "$TRAVIS_OS_NAME" == "osx" ]]; then
        gem install coveralls-lcov
      fi
      if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
      echo "Coverage not supported for Windows"
      travis_terminate 1
      fi
    fi

before_script:
  - > # to debug environment use 'true'
    if ( false ); then
      echo $PATH
      if [[ "$TRAVIS_OS_NAME" == "linux" || "$TRAVIS_OS_NAME" == "osx" ]]; then
        c++ --version
      fi
      cmake --version
    fi
  - >

script:
  # - set -eo pipefail
  - cd ${TRAVIS_BUILD_DIR}
  - mkdir build && cd build
  - >
    if [[ "$TRAVIS_OS_NAME" == "linux" || "$TRAVIS_OS_NAME" == "osx" ]]; then
      cmake .. -DCMAKE_BUILD_TYPE=${MODE}
      cmake --build .
    fi
  - >
    if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
      cmake ..
      cmake --build . --target ALL_BUILD --config ${MODE}
      # add library directory search PATH for executables
      export PATH=$PWD/src/lib/${MODE}:$PATH
    fi

  - >
    if [[ "$MODE" == "Coverage" ]]; then
      # Windows os has been filtered out in install step
      cmake --build . --target coverage --config Coverage
    else
      ctest -C ${MODE} # --verbose
    fi

  - >
    cmake --build . --target install --config ${MODE}
    # Show installation directory content
    find installed/strip
    # Cleanup compiled libs to check right path finding
    rm -fr src/lib
  - >
    if [[ "$TRAVIS_OS_NAME" == "linux" || "$TRAVIS_OS_NAME" == "osx" ]]; then
      # add library directory search PATH for executables
      export LD_LIBRARY_PATH=$PWD/installed/lib:$LD_LIBRARY_PATH
      ctest -C ${MODE}
    fi
  - >
    if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
      # add library directory search PATH for executables
      export PATH=$PWD/installed/bin:$PATH
    fi
  -> ctest -C ${MODE}

#addons:
#  artifacts:
#    debug: false
#    paths:
#      - ${HOME}/build

after_success:
  - cd ${TRAVIS_BUILD_DIR}/build
  - >
    if [[ "$MODE" == "Coverage" ]]; then
      lcov --list coverage.info
      coveralls-lcov coverage.info
    fi
